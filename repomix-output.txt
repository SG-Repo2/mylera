This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repomix on: 2025-01-25T21:06:21.552Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
src/
  features/
    metrics/
      components/
        MetricCard.tsx
  providers/
    AuthProvider.tsx
  services/
    leaderboardService.ts
    metricsService.ts
    supabaseClient.ts
  types/
    nativewind.d.ts
.gitignore
app.config.js
app.json
babel.config.js
index.js
nativewind-config.js
package.json
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: src/features/metrics/components/MetricCard.tsx
================
import React from 'react';
import { View, Text, Pressable } from 'react-native';

interface MetricCardProps {
  title: string;
  value: number;
  goal: number;
  points: number;
  unit: string;
  onPress?: () => void;
}

export function MetricCard({
  title,
  value,
  goal,
  points,
  unit,
  onPress
}: MetricCardProps) {
  // Calculate progress percentage
  const progress = Math.min(Math.max((value / goal) * 100, 0), 100);
  const isGoalReached = value >= goal;

  return (
    <Pressable
      className="bg-white p-4 rounded-lg shadow"
      onPress={onPress}
      disabled={!onPress}
    >
      <View className="flex-row justify-between items-center mb-2">
        <Text className="text-lg font-semibold text-text-primary">
          {title}
        </Text>
        <View className="bg-primary/10 px-2 py-1 rounded">
          <Text className="text-primary text-sm font-medium">
            {points} pts
          </Text>
        </View>
      </View>

      <Text className="text-3xl font-bold text-primary">
        {value.toLocaleString()} <Text className="text-lg">{unit}</Text>
      </Text>

      {/* Progress bar */}
      <View className="h-2 bg-gray-100 rounded-full mt-2 overflow-hidden">
        <View 
          className={`h-full rounded-full ${
            isGoalReached ? 'bg-status-success' : 'bg-primary'
          }`}
          style={{ width: `${progress}%` }}
        />
      </View>

      <View className="flex-row justify-between items-center mt-2">
        <Text className="text-text-secondary">
          Goal: {goal.toLocaleString()} {unit}
        </Text>
        {isGoalReached && (
          <Text className="text-status-success font-medium">
            Goal Reached!
          </Text>
        )}
      </View>
    </Pressable>
  );
}

================
File: src/providers/AuthProvider.tsx
================
import { createContext, useContext, useEffect, useState } from 'react';
import { Session } from '@supabase/supabase-js';
import { supabase } from '../services/supabaseClient';

interface AuthContextType {
  session: Session | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
  error: string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setLoading(false);
    });

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    try {
      setError(null);
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An error occurred during sign in');
    }
  };

  const signOut = async () => {
    try {
      setError(null);
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An error occurred during sign out');
    }
  };

  const value = {
    session,
    loading,
    signIn,
    signOut,
    error,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

================
File: src/services/leaderboardService.ts
================
import { supabase } from './supabaseClient';
import { PostgrestResponse } from '@supabase/supabase-js';

interface LeaderboardEntry {
  user_id: string;
  display_name: string;
  avatar_url: string | null;
  total_points: number;
  metrics_completed: number;
  rank: number;
}

interface UserProfile {
  display_name: string | null;
  avatar_url: string | null;
  show_profile: boolean;
}

interface DailyTotal {
  user_id: string;
  total_points: number;
  metrics_completed: number;
  user_profiles: UserProfile | null;
}

export const leaderboardService = {
  async getDailyLeaderboard(date: string): Promise<LeaderboardEntry[]> {
    const { data, error } = await supabase
      .from('daily_totals')
      .select(`
        user_id,
        total_points,
        metrics_completed,
        user_profiles (
          display_name,
          avatar_url,
          show_profile
        )
      `)
      .eq('date', date)
      .order('total_points', { ascending: false }) as PostgrestResponse<DailyTotal>;

    if (error) throw error;
    if (!data) return [];

    // Filter out users who don't want to show their profile
    // and format the response
    const leaderboard = data
      .filter(entry => entry.user_profiles?.show_profile)
      .map((entry, index) => ({
        user_id: entry.user_id,
        display_name: entry.user_profiles?.display_name || 'Anonymous User',
        avatar_url: entry.user_profiles?.avatar_url || null,
        total_points: entry.total_points,
        metrics_completed: entry.metrics_completed,
        rank: index + 1,
      }));

    return leaderboard;
  },

  async getUserRank(userId: string, date: string): Promise<number | null> {
    const { data, error } = await supabase
      .from('daily_totals')
      .select('user_id, total_points')
      .eq('date', date)
      .order('total_points', { ascending: false });

    if (error) throw error;
    if (!data) return null;

    const userIndex = data.findIndex(entry => entry.user_id === userId);
    return userIndex === -1 ? null : userIndex + 1;
  },

  async updateUserProfile(userId: string, profile: {
    display_name?: string;
    avatar_url?: string;
    show_profile?: boolean;
  }) {
    const { error } = await supabase
      .from('user_profiles')
      .upsert({
        id: userId,
        ...profile,
        updated_at: new Date().toISOString(),
      });

    if (error) throw error;
  },

  async getUserProfile(userId: string): Promise<UserProfile | null> {
    const { data, error } = await supabase
      .from('user_profiles')
      .select('display_name, avatar_url, show_profile')
      .eq('id', userId)
      .single();

    if (error && error.code !== 'PGRST116') throw error; // PGRST116 is "not found"
    return data;
  },
};

================
File: src/services/metricsService.ts
================
import { supabase } from './supabaseClient';

export type MetricType = 'steps' | 'distance' | 'calories';

interface MetricScore {
  user_id: string;
  date: string;
  metric_type: MetricType;
  goal_reached: boolean;
  points: number;
}

interface MetricUpdate {
  value: number;
  goal: number;
  type: MetricType;
}

export const metricsService = {
  async getDailyMetrics(userId: string, date: string) {
    const { data, error } = await supabase
      .from('daily_metric_scores')
      .select('*')
      .eq('user_id', userId)
      .eq('date', date);

    if (error) throw error;
    return data;
  },

  async updateMetric(userId: string, update: MetricUpdate) {
    const today = new Date().toISOString().split('T')[0];
    const goalReached = update.value >= update.goal;
    
    // Calculate points based on progress
    const progressPercentage = Math.min((update.value / update.goal) * 100, 100);
    const points = Math.floor(progressPercentage);

    const metricScore: MetricScore = {
      user_id: userId,
      date: today,
      metric_type: update.type,
      goal_reached: goalReached,
      points,
    };

    const { error } = await supabase
      .from('daily_metric_scores')
      .upsert(metricScore, {
        onConflict: 'user_id,date,metric_type'
      });

    if (error) throw error;

    // Update daily totals
    await this.updateDailyTotal(userId, today);
  },

  async updateDailyTotal(userId: string, date: string) {
    // Get all metrics for the day
    const { data: metrics, error: metricsError } = await supabase
      .from('daily_metric_scores')
      .select('points, goal_reached')
      .eq('user_id', userId)
      .eq('date', date);

    if (metricsError) throw metricsError;

    // Calculate totals
    const totalPoints = metrics?.reduce((sum, metric) => sum + metric.points, 0) ?? 0;
    const metricsCompleted = metrics?.filter(metric => metric.goal_reached).length ?? 0;

    // Update daily_totals
    const { error: updateError } = await supabase
      .from('daily_totals')
      .upsert({
        user_id: userId,
        date,
        total_points: totalPoints,
        metrics_completed: metricsCompleted,
      }, {
        onConflict: 'user_id,date'
      });

    if (updateError) throw updateError;
  },

  getMetricGoals(): Record<MetricType, number> {
    return {
      steps: 10000,
      distance: 5, // km
      calories: 2000,
    };
  },
};

================
File: src/services/supabaseClient.ts
================
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';
import Constants from 'expo-constants';
import 'react-native-url-polyfill/auto';

const supabaseUrl = Constants.expoConfig?.extra?.supabaseUrl;
const supabaseAnonKey = Constants.expoConfig?.extra?.supabaseAnonKey;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase configuration. Please check your environment variables.');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});

================
File: src/types/nativewind.d.ts
================
/// <reference types="nativewind/types" />
import type { ViewProps as RNViewProps } from 'react-native';
import type { TextProps as RNTextProps } from 'react-native';
import type { TextInputProps as RNTextInputProps } from 'react-native';
import type { PressableProps as RNPressableProps } from 'react-native';
import type { ImageProps as RNImageProps } from 'react-native';
import type { ScrollViewProps as RNScrollViewProps } from 'react-native';
import type { KeyboardAvoidingViewProps as RNKeyboardAvoidingViewProps } from 'react-native';
import type { SafeAreaViewProps as RNSafeAreaViewProps } from 'react-native';

declare module 'react-native' {
  export interface ViewProps extends RNViewProps {
    className?: string;
  }
  export interface TextProps extends RNTextProps {
    className?: string;
  }
  export interface TextInputProps extends RNTextInputProps {
    className?: string;
  }
  export interface PressableProps extends RNPressableProps {
    className?: string;
  }
  export interface ImageProps extends RNImageProps {
    className?: string;
  }
  export interface ScrollViewProps extends RNScrollViewProps {
    className?: string;
  }
  export interface KeyboardAvoidingViewProps extends RNKeyboardAvoidingViewProps {
    className?: string;
  }
  export interface SafeAreaViewProps extends RNSafeAreaViewProps {
    className?: string;
  }
}

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example

================
File: app.config.js
================
module.exports = {
  expo: {
    name: "mylera",
    slug: "mylera",
    version: "1.0.0",
    orientation: "portrait",
    icon: "./assets/images/icon.png",
    scheme: "mylera",
    userInterfaceStyle: "automatic",
    newArchEnabled: true,
    splash: {
      image: "./assets/images/splash-icon.png",
      resizeMode: "contain",
      backgroundColor: "#ffffff"
    },
    assetBundlePatterns: ["**/*"],
    ios: {
      supportsTablet: true
    },
    android: {
      adaptiveIcon: {
        foregroundImage: "./assets/images/adaptive-icon.png",
        backgroundColor: "#ffffff"
      }
    },
    web: {
      bundler: "metro",
      output: "static",
      favicon: "./assets/images/favicon.png"
    },
    plugins: ["expo-router"],
    experiments: {
      typedRoutes: true,
      tsconfigPaths: true
    }
  }
};

================
File: app.json
================
{
  "expo": {
    "name": "mylera",
    "slug": "mylera",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}

================
File: babel.config.js
================
module.exports = function (api) {
  api.cache(true);
  return {
    presets: [
      ['babel-preset-expo', {
        jsxImportSource: 'nativewind',
      }],
    ],
    plugins: [
      'react-native-reanimated/plugin',
    ],
  };
};

================
File: index.js
================
import 'expo-router/entry';
import 'react-native-url-polyfill/auto';
import { withExpoSnack } from 'nativewind';

// Register for NativeWind
withExpoSnack(require('./app/_layout').default);

================
File: nativewind-config.js
================
module.exports = {
  content: {
    files: [
      "./app/**/*.{js,jsx,ts,tsx}",
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
  },
  theme: {
    extend: {
      colors: {
        primary: "#20B2AA",
        secondary: "#9B59B6",
        background: "#f9f9f9",
        text: {
          primary: "#2C3E50",
          secondary: "#7F8C8D",
          light: "#FFFFFF"
        },
        status: {
          success: "#2ECC71",
          warning: "#F1C40F",
          error: "#E74C3C"
        }
      },
    },
  },
};

================
File: package.json
================
{
  "name": "mylera",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "expo": "~52.0.27",
    "expo-blur": "~14.0.2",
    "expo-constants": "~17.0.4",
    "expo-font": "~13.0.3",
    "expo-haptics": "~14.0.1",
    "expo-linking": "~7.0.4",
    "expo-router": "~4.0.17",
    "expo-splash-screen": "~0.29.21",
    "expo-status-bar": "~2.0.1",
    "expo-symbols": "~0.2.1",
    "expo-system-ui": "~4.0.7",
    "expo-web-browser": "~14.0.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.6",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.3",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: {
    files: [
      "./app/**/*.{js,jsx,ts,tsx}",
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
  },
  presets: [require("./nativewind-config.js")],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}
