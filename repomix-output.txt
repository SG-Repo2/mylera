================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repomix's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repomix, visit: https://github.com/yamadashy/repomix

================================================================
Repository Structure
================================================================
docs/
  architecture.md
  development.md
  implementation-tasks.md
  ui-guidelines.md
src/
  features/
    metrics/
      components/
        MetricCard.tsx
  providers/
    AuthProvider.tsx
  services/
    leaderboardService.ts
    metricsService.ts
    supabaseClient.ts
  types/
    nativewind.d.ts
.gitignore
app.config.js
app.json
babel.config.js
index.js
nativewind-config.js
package.json
tailwind.config.js
tsconfig.json

================================================================
Repository Files
================================================================

================
File: docs/architecture.md
================
# MyLera App Architecture Documentation

## Overview
MyLera is a React Native application built with Expo that uses Supabase for authentication and data storage. The app features a health metrics dashboard and leaderboard system.

## Project Structure
```
mylera/
├── assets/
│   └── images/
├── src/
│   ├── features/
│   │   ├── auth/
│   │   │   ├── screens/
│   │   │   │   └── LoginScreen.tsx
│   │   │   ├── hooks/
│   │   │   │   └── useAuth.ts
│   │   ├── metrics/
│   │   │   ├── screens/
│   │   │   │   └── MetricsDashboardScreen.tsx
│   │   │   ├── components/
│   │   │   │   └── MetricCard.tsx
│   │   ├── leaderboard/
│   │   │   ├── screens/
│   │   │   │   └── LeaderboardScreen.tsx
│   │   │   ├── components/
│   │   │   │   └── LeaderboardItem.tsx
│   ├── services/
│   │   ├── supabaseClient.ts
│   │   ├── metricsService.ts
│   │   ├── leaderboardService.ts
│   ├── providers/
│   │   └── AuthProvider.tsx
│   ├── navigation/
│   │   └── AppNavigator.tsx
│   ├── App.tsx
├── babel.config.js
├── tailwind.config.js
├── package.json
```

## Core Dependencies
- expo: The foundation framework
- @supabase/supabase-js: Supabase client library
- @react-navigation/native & @react-navigation/native-stack: Navigation
- nativewind: Tailwind CSS for React Native
- @react-native-async-storage/async-storage: Storage for Supabase auth
- react-native-url-polyfill: Required for Supabase in React Native

## Database Schema

### Tables

#### user_profiles
```sql
CREATE TABLE IF NOT EXISTS public.user_profiles (
    id UUID REFERENCES auth.users (id) PRIMARY KEY,
    display_name TEXT,
    avatar_url TEXT,
    show_profile BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now()
);
```

#### daily_metric_scores
```sql
CREATE TABLE IF NOT EXISTS public.daily_metric_scores (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id UUID REFERENCES auth.users (id) NOT NULL,
    date DATE NOT NULL,
    metric_type TEXT NOT NULL,
    goal_reached BOOLEAN DEFAULT FALSE,
    points INT DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    CONSTRAINT unique_daily_metric UNIQUE (user_id, date, metric_type)
);
```

#### daily_totals
```sql
CREATE TABLE IF NOT EXISTS public.daily_totals (
    id UUID DEFAULT uuid_generate_v4() PRIMARY KEY,
    user_id UUID REFERENCES auth.users (id) NOT NULL,
    date DATE NOT NULL,
    total_points INT DEFAULT 0,
    metrics_completed INT DEFAULT 0,
    created_at TIMESTAMPTZ DEFAULT now(),
    updated_at TIMESTAMPTZ DEFAULT now(),
    CONSTRAINT unique_daily_total UNIQUE (user_id, date)
);
```

### Row Level Security (RLS) Policies

#### user_profiles RLS
```sql
CREATE POLICY "select public or own" ON public.user_profiles
    FOR SELECT USING (
      show_profile = TRUE OR auth.uid() = id
    );
CREATE POLICY "insert/update own" ON public.user_profiles
    FOR ALL USING (auth.uid() = id)
    WITH CHECK (auth.uid() = id);
```

#### daily_metric_scores RLS
```sql
CREATE POLICY "select own" ON public.daily_metric_scores
    FOR SELECT USING (auth.uid() = user_id);
CREATE POLICY "insert/update own" ON public.daily_metric_scores
    FOR ALL USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);
```

#### daily_totals RLS
```sql
CREATE POLICY "select all" ON public.daily_totals
    FOR SELECT USING (true);
CREATE POLICY "insert/update own" ON public.daily_totals
    FOR ALL USING (auth.uid() = user_id)
    WITH CHECK (auth.uid() = user_id);
```

## Key Components

### Authentication Flow
1. `AuthProvider`: Manages authentication state and provides auth methods
2. `LoginScreen`: Handles user login with email/password
3. `useAuth` hook: Provides auth context to components

### Metrics System
1. `MetricsDashboardScreen`: Displays user's daily metrics
2. `MetricCard`: Reusable component for displaying metric data
3. `metricsService`: Handles metric data operations with Supabase

### Leaderboard System
1. `LeaderboardScreen`: Displays daily leaderboard
2. `LeaderboardItem`: Component for individual leaderboard entries
3. `leaderboardService`: Manages leaderboard data operations

## Implementation Guidelines

### Setting Up Supabase Client
```typescript
// src/services/supabaseClient.ts
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';
import Constants from 'expo-constants';

const supabaseUrl = Constants.expoConfig?.extra?.supabaseUrl;
const supabaseAnonKey = Constants.expoConfig?.extra?.supabaseAnonKey;

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});
```

### Authentication Provider Pattern
```typescript
// src/providers/AuthProvider.tsx
export function AuthProvider({ children }) {
  // Manage auth state
  // Provide signIn, signOut methods
  // Handle session persistence
}

// Usage in components
const { session, signIn, signOut } = useAuth();
```

### Metrics Update Flow
1. Collect metric data (steps, distance, calories)
2. Update individual metric scores
3. Calculate and update daily total
4. Refresh leaderboard data

### Data Flow
```
User Action → Update Metric → Update Daily Total → Refresh Leaderboard
```

## Security Considerations
1. All database access is controlled through RLS policies
2. Users can only modify their own data
3. Profile visibility is controlled by show_profile flag
4. Leaderboard entries respect privacy settings

## Setup Instructions
1. Create Supabase project and set up tables with RLS
2. Configure environment variables for Supabase URL and anon key
3. Install dependencies with `yarn install`
4. Run with `yarn expo start`

## Testing Strategy
1. Auth flow testing
2. Metric update validation
3. Leaderboard calculation verification
4. Privacy settings enforcement

## Performance Considerations
1. Minimize unnecessary re-renders
2. Batch metric updates
3. Cache leaderboard data
4. Implement proper error boundaries

## Future Enhancements
1. Social features
2. Achievement system
3. Historical data visualization
4. Team competitions
5. Integration with health platforms

================
File: docs/development.md
================
# Development Guide

## Setup & Installation

### Prerequisites
- Node.js (v18 or later)
- Yarn package manager
- Expo CLI (`npm install -g expo-cli`)
- Supabase account
- iOS Simulator (for Mac) or Android Emulator

### Environment Setup
1. Clone the repository
2. Create `.env` file with Supabase credentials:
```
EXPO_PUBLIC_SUPABASE_URL=your_supabase_url
EXPO_PUBLIC_SUPABASE_ANON_KEY=your_supabase_anon_key
```

### Development Workflow
1. Install dependencies: `yarn install`
2. Start development server: `yarn expo start`
3. Press 'i' for iOS or 'a' for Android

## Code Organization

### Feature-First Structure
- Each feature (auth, metrics, leaderboard) is self-contained
- Features include their own components, hooks, and screens
- Shared logic goes in `src/services`

### Component Guidelines
1. Use TypeScript for all components
2. Implement proper prop types
3. Use NativeWind for styling
4. Keep components focused and single-responsibility

Example component structure:
```typescript
interface Props {
  // Clear prop definitions
}

export function MyComponent({ prop1, prop2 }: Props) {
  // Implementation
}
```

### State Management
- Use React Context for global state (auth)
- Local state for component-specific data
- Supabase for persistence

## API Integration

### Supabase Services

#### Authentication
```typescript
// Login
const { data, error } = await supabase.auth.signInWithPassword({
  email,
  password
});

// Logout
const { error } = await supabase.auth.signOut();
```

#### Metrics
```typescript
// Update metric
const { error } = await supabase
  .from('daily_metric_scores')
  .upsert({
    user_id,
    date,
    metric_type,
    points
  });
```

#### Leaderboard
```typescript
// Fetch leaderboard
const { data, error } = await supabase
  .from('daily_totals')
  .select(`
    user_id,
    total_points,
    user_profiles (
      display_name,
      avatar_url
    )
  `)
  .eq('date', today)
  .order('total_points', { ascending: false });
```

## Testing

### Unit Tests
- Test components in isolation
- Mock Supabase calls
- Verify state updates

### Integration Tests
- Test feature workflows
- Verify data persistence
- Check navigation flows

### E2E Tests
- Test complete user journeys
- Verify app behavior in production-like environment

## Error Handling

### API Errors
```typescript
try {
  const { data, error } = await supabaseCall();
  if (error) throw error;
  // Handle success
} catch (error) {
  // Handle error appropriately
}
```

### UI Error Boundaries
```typescript
class ErrorBoundary extends React.Component {
  // Implement error boundary logic
}
```

## Performance Optimization

### React Native Best Practices
1. Use `useCallback` for function props
2. Implement `useMemo` for expensive calculations
3. Optimize list rendering with proper keys
4. Use image caching

### Data Loading Patterns
1. Implement loading states
2. Show placeholders during data fetch
3. Cache responses when appropriate
4. Handle offline scenarios

## Deployment

### Expo Build
1. Configure app.json
2. Run `expo build:ios` or `expo build:android`
3. Submit to respective app stores

### Version Management
- Use semantic versioning
- Maintain changelog
- Document breaking changes

## Monitoring & Analytics

### Error Tracking
- Implement error logging
- Track API failures
- Monitor performance metrics

### Usage Analytics
- Track user engagement
- Monitor feature usage
- Analyze performance metrics

## Security Guidelines

### Data Protection
1. Never store sensitive data in plain text
2. Use secure storage for tokens
3. Implement proper session management
4. Follow platform security best practices

### Code Security
1. Regular dependency updates
2. Code review requirements
3. Security scanning in CI/CD
4. Protected branches

## Contribution Guidelines

### Pull Request Process
1. Create feature branch
2. Follow code style guide
3. Include tests
4. Update documentation
5. Request review

### Code Review Checklist
- [ ] Follows style guide
- [ ] Includes tests
- [ ] Documentation updated
- [ ] No security concerns
- [ ] Performance considered
- [ ] Error handling implemented

## Troubleshooting

### Common Issues
1. Supabase connection issues
2. Build errors
3. Navigation problems
4. State management bugs

### Debug Tools
- React Native Debugger
- Supabase Dashboard
- Expo Developer Tools
- Chrome Developer Tools

## Resources

### Documentation
- [Expo Documentation](https://docs.expo.dev)
- [React Native Documentation](https://reactnative.dev)
- [Supabase Documentation](https://supabase.io/docs)
- [NativeWind Documentation](https://www.nativewind.dev)

### Community
- GitHub Discussions
- Discord Channel
- Stack Overflow Tags

================
File: docs/implementation-tasks.md
================
# Implementation Tasks

## Task for Coder

Please implement the MyLera app following these step-by-step instructions:

1. **Initial Setup**
```bash
# Create new Expo project
npx create-expo-app mylera --template blank-typescript

# Install dependencies
cd mylera
yarn add @react-native-async-storage/async-storage @react-navigation/native @react-navigation/native-stack @supabase/supabase-js expo-constants nativewind react-native-safe-area-context react-native-screens react-native-url-polyfill
yarn add -D tailwindcss@3.3.2
```


```
EXPO_PUBLIC_SUPABASE_URL=your_project_url
EXPO_PUBLIC_SUPABASE_ANON_KEY=your_anon_key
```

3. **Project Structure**
Create the following directory structure:
```
src/
├── features/
│   ├── auth/
│   │   ├── screens/
│   │   │   └── LoginScreen.tsx
│   │   ├── hooks/
│   │   │   └── useAuth.ts
│   ├── metrics/
│   │   ├── screens/
│   │   │   └── MetricsDashboardScreen.tsx
│   │   ├── components/
│   │   │   └── MetricCard.tsx
│   ├── leaderboard/
│   │   ├── screens/
│   │   │   └── LeaderboardScreen.tsx
│   │   ├── components/
│   │   │   └── LeaderboardItem.tsx
├── services/
│   ├── supabaseClient.ts
│   ├── metricsService.ts
│   ├── leaderboardService.ts
├── providers/
│   └── AuthProvider.tsx
├── navigation/
│   └── AppNavigator.tsx
└── App.tsx
```

4. **Implementation Order**
Follow this sequence to implement the components:

a. **Core Setup**
- Implement `supabaseClient.ts` first (see architecture.md for code)
- Set up NativeWind configuration (see ui-guidelines.md)
- Create `AuthProvider.tsx` (see architecture.md for implementation)

b. **Authentication**
- Implement `LoginScreen.tsx` with email/password login
- Create `useAuth.ts` hook for auth state management
- Set up `AppNavigator.tsx` with authentication flow

c. **Metrics Feature**
- Create `MetricCard.tsx` component (see ui-guidelines.md for design)
- Implement `metricsService.ts` with Supabase operations
- Build `MetricsDashboardScreen.tsx` with mock data initially

d. **Leaderboard Feature**
- Create `LeaderboardItem.tsx` component
- Implement `leaderboardService.ts`
- Build `LeaderboardScreen.tsx`

5. **Testing & Refinement**
- Test authentication flow
- Verify metric updates
- Check leaderboard functionality
- Ensure proper error handling
- Validate UI/UX against guidelines

## Implementation Notes

1. **Authentication Flow**
- Use Supabase email/password auth
- Implement proper session management
- Handle auth state changes

2. **Metrics Dashboard**
- Start with hardcoded metrics (steps, distance, calories)
- Implement metric updates
- Show progress towards goals

3. **Leaderboard**
- Display top users
- Respect privacy settings
- Update in real-time when possible

4. **Styling**
- Follow NativeWind patterns in ui-guidelines.md
- Use consistent spacing and typography
- Implement proper loading states

5. **Error Handling**
- Implement proper error boundaries
- Show user-friendly error messages
- Handle network issues gracefully

## Resources
- Refer to architecture.md for system design
- Check development.md for best practices
- Follow ui-guidelines.md for component patterns

## Definition of Done
- All features implemented and functional
- Proper error handling in place
- UI matches design guidelines
- Code follows TypeScript best practices
- Basic testing implemented
- Smooth navigation flow
- Proper data persistence
- Clean error handling

================
File: docs/ui-guidelines.md
================
# UI/UX Guidelines and Component Patterns

## Design System

### Colors
```typescript
const colors = {
  primary: "#20B2AA", // Light Sea Green
  secondary: "#9B59B6", // Purple
  background: "#f9f9f9", // Light Gray
  text: {
    primary: "#2C3E50", // Dark Blue Gray
    secondary: "#7F8C8D", // Gray
    light: "#FFFFFF" // White
  },
  status: {
    success: "#2ECC71", // Green
    warning: "#F1C40F", // Yellow
    error: "#E74C3C" // Red
  }
};
```

### Typography
```typescript
const typography = {
  sizes: {
    xs: 12,
    sm: 14,
    base: 16,
    lg: 18,
    xl: 20,
    "2xl": 24,
    "3xl": 30
  },
  weights: {
    regular: "400",
    medium: "500",
    semibold: "600",
    bold: "700"
  }
};
```

### Spacing
```typescript
const spacing = {
  xs: 4,
  sm: 8,
  md: 16,
  lg: 24,
  xl: 32,
  "2xl": 48
};
```

## Component Patterns

### Buttons

#### Primary Button
```typescript
interface ButtonProps {
  title: string;
  onPress: () => void;
  disabled?: boolean;
  loading?: boolean;
}

// Usage with NativeWind
<Pressable 
  className={`
    bg-primary 
    px-4 
    py-3 
    rounded-lg
    ${disabled ? 'opacity-50' : 'opacity-100'}
  `}
  onPress={onPress}
  disabled={disabled}
>
  {loading ? (
    <ActivityIndicator color="white" />
  ) : (
    <Text className="text-white font-semibold text-center">
      {title}
    </Text>
  )}
</Pressable>
```

### Cards

#### MetricCard Pattern
```typescript
interface MetricCardProps {
  title: string;
  value: number;
  goal: number;
  points: number;
  unit: string;
  onPress?: () => void;
}

// Implementation guidelines
- Show progress bar
- Display current value and goal
- Include points earned
- Optional tap interaction
```

#### LeaderboardItem Pattern
```typescript
interface LeaderboardItemProps {
  rank: number;
  userName: string;
  points: number;
  isCurrentUser?: boolean;
}

// Implementation guidelines
- Highlight current user
- Show rank prominently
- Display points clearly
- Optional avatar
```

## Screen Patterns

### Layout Structure
```typescript
// Basic screen layout
<SafeAreaView className="flex-1 bg-background">
  <View className="px-4 py-3">
    <Header />
    <Content />
    <Footer />
  </View>
</SafeAreaView>
```

### Common Screen Elements

#### Headers
```typescript
// Standard header
<View className="flex-row justify-between items-center py-4">
  <Text className="text-xl font-bold">{title}</Text>
  {rightElement && <View>{rightElement}</View>}
</View>
```

#### Loading States
```typescript
// Full screen loading
<View className="flex-1 justify-center items-center">
  <ActivityIndicator size="large" color={colors.primary} />
  <Text className="mt-2 text-gray-600">Loading...</Text>
</View>

// Content placeholder
<View className="animate-pulse">
  <View className="h-20 bg-gray-200 rounded-lg mb-4" />
</View>
```

#### Error States
```typescript
// Error display
<View className="flex-1 justify-center items-center p-4">
  <Text className="text-error text-lg mb-2">Something went wrong</Text>
  <Text className="text-gray-600 text-center mb-4">
    {errorMessage}
  </Text>
  <Button title="Try Again" onPress={retry} />
</View>
```

## Animation Guidelines

### Micro-interactions
- Use subtle scale transforms for button presses
- Implement smooth transitions between states
- Keep animations under 300ms for responsiveness

```typescript
// Button press animation
const animatedScale = useAnimatedStyle(() => ({
  transform: [{ scale: withSpring(pressed.value ? 0.95 : 1) }]
}));
```

### Screen Transitions
- Use default platform transitions when possible
- Implement custom transitions sparingly
- Ensure smooth gesture-based navigation

## Form Patterns

### Input Fields
```typescript
interface InputFieldProps {
  label: string;
  value: string;
  onChangeText: (text: string) => void;
  error?: string;
  placeholder?: string;
  secureTextEntry?: boolean;
}

// Implementation
<View className="mb-4">
  <Text className="text-sm text-gray-600 mb-1">{label}</Text>
  <TextInput
    className={`
      bg-white 
      p-3 
      rounded-lg 
      border 
      ${error ? 'border-error' : 'border-gray-200'}
    `}
    value={value}
    onChangeText={onChangeText}
    placeholder={placeholder}
    secureTextEntry={secureTextEntry}
  />
  {error && (
    <Text className="text-error text-sm mt-1">{error}</Text>
  )}
</View>
```

## Accessibility Guidelines

### Touch Targets
- Minimum touch target size: 44x44 points
- Adequate spacing between interactive elements
- Clear visual feedback on interaction

### Color Contrast
- Maintain WCAG 2.1 AA standard (4.5:1 for normal text)
- Use color + icons for status indicators
- Provide sufficient contrast for text on backgrounds

### Screen Readers
- Implement proper accessibilityLabel props
- Use semantic HTML elements
- Provide clear navigation hierarchy

## Responsive Design

### Device Adaptation
```typescript
// Responsive spacing
const containerPadding = useWindowDimensions().width < 375 ? 16 : 24;

// Dynamic font sizing
const fontSize = Math.min(width * 0.04, 20);
```

### Orientation Changes
- Support both portrait and landscape
- Adjust layouts dynamically
- Maintain content readability

## Performance Considerations

### Image Handling
- Use appropriate image sizes
- Implement lazy loading
- Cache frequently used images

### List Optimization
- Implement virtualization for long lists
- Use memo for list items
- Optimize re-renders

## Testing & Quality Assurance

### Visual Testing
- Test on multiple device sizes
- Verify dark/light mode compatibility
- Check animation performance

### Interaction Testing
- Verify touch feedback
- Test gesture interactions
- Validate form behavior

### Accessibility Testing
- Screen reader compatibility
- Color contrast verification
- Touch target size validation

## Implementation Checklist

### New Components
- [ ] Follows design system
- [ ] Implements proper types
- [ ] Handles loading states
- [ ] Manages error states
- [ ] Supports accessibility
- [ ] Optimized for performance

### Screen Implementation
- [ ] Uses consistent layout patterns
- [ ] Implements proper navigation
- [ ] Handles device rotation
- [ ] Manages keyboard interaction
- [ ] Supports pull-to-refresh (if applicable)
- [ ] Implements proper error boundaries

## Best Practices

1. **Component Organization**
   - Keep components focused and single-responsibility
   - Use composition over inheritance
   - Implement proper prop validation

2. **Style Management**
   - Use NativeWind classes consistently
   - Avoid inline styles
   - Maintain design system tokens

3. **Performance**
   - Optimize re-renders
   - Implement proper memoization
   - Use appropriate image formats

4. **Accessibility**
   - Implement proper ARIA labels
   - Maintain focus management
   - Support screen readers

5. **Testing**
   - Write component tests
   - Implement visual regression testing
   - Validate accessibility compliance

================
File: src/features/metrics/components/MetricCard.tsx
================
import React from 'react';
import { View, Text, Pressable } from 'react-native';

interface MetricCardProps {
  title: string;
  value: number;
  goal: number;
  points: number;
  unit: string;
  onPress?: () => void;
}

export function MetricCard({
  title,
  value,
  goal,
  points,
  unit,
  onPress
}: MetricCardProps) {
  // Calculate progress percentage
  const progress = Math.min(Math.max((value / goal) * 100, 0), 100);
  const isGoalReached = value >= goal;

  return (
    <Pressable
      className="bg-white p-4 rounded-lg shadow"
      onPress={onPress}
      disabled={!onPress}
    >
      <View className="flex-row justify-between items-center mb-2">
        <Text className="text-lg font-semibold text-text-primary">
          {title}
        </Text>
        <View className="bg-primary/10 px-2 py-1 rounded">
          <Text className="text-primary text-sm font-medium">
            {points} pts
          </Text>
        </View>
      </View>

      <Text className="text-3xl font-bold text-primary">
        {value.toLocaleString()} <Text className="text-lg">{unit}</Text>
      </Text>

      {/* Progress bar */}
      <View className="h-2 bg-gray-100 rounded-full mt-2 overflow-hidden">
        <View 
          className={`h-full rounded-full ${
            isGoalReached ? 'bg-status-success' : 'bg-primary'
          }`}
          style={{ width: `${progress}%` }}
        />
      </View>

      <View className="flex-row justify-between items-center mt-2">
        <Text className="text-text-secondary">
          Goal: {goal.toLocaleString()} {unit}
        </Text>
        {isGoalReached && (
          <Text className="text-status-success font-medium">
            Goal Reached!
          </Text>
        )}
      </View>
    </Pressable>
  );
}

================
File: src/providers/AuthProvider.tsx
================
import { createContext, useContext, useEffect, useState } from 'react';
import { Session } from '@supabase/supabase-js';
import { supabase } from '../services/supabaseClient';

interface AuthContextType {
  session: Session | null;
  loading: boolean;
  signIn: (email: string, password: string) => Promise<void>;
  signOut: () => Promise<void>;
  error: string | null;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
  const [session, setSession] = useState<Session | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    // Get initial session
    supabase.auth.getSession().then(({ data: { session } }) => {
      setSession(session);
      setLoading(false);
    });

    // Listen for auth changes
    const { data: { subscription } } = supabase.auth.onAuthStateChange((_event, session) => {
      setSession(session);
      setLoading(false);
    });

    return () => subscription.unsubscribe();
  }, []);

  const signIn = async (email: string, password: string) => {
    try {
      setError(null);
      const { error } = await supabase.auth.signInWithPassword({
        email,
        password,
      });
      if (error) throw error;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An error occurred during sign in');
    }
  };

  const signOut = async () => {
    try {
      setError(null);
      const { error } = await supabase.auth.signOut();
      if (error) throw error;
    } catch (error) {
      setError(error instanceof Error ? error.message : 'An error occurred during sign out');
    }
  };

  const value = {
    session,
    loading,
    signIn,
    signOut,
    error,
  };

  return (
    <AuthContext.Provider value={value}>
      {children}
    </AuthContext.Provider>
  );
}

export function useAuth() {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
}

================
File: src/services/leaderboardService.ts
================
import { supabase } from './supabaseClient';
import { PostgrestResponse } from '@supabase/supabase-js';

interface LeaderboardEntry {
  user_id: string;
  display_name: string;
  avatar_url: string | null;
  total_points: number;
  metrics_completed: number;
  rank: number;
}

interface UserProfile {
  display_name: string | null;
  avatar_url: string | null;
  show_profile: boolean;
}

interface DailyTotal {
  user_id: string;
  total_points: number;
  metrics_completed: number;
  user_profiles: UserProfile | null;
}

export const leaderboardService = {
  async getDailyLeaderboard(date: string): Promise<LeaderboardEntry[]> {
    const { data, error } = await supabase
      .from('daily_totals')
      .select(`
        user_id,
        total_points,
        metrics_completed,
        user_profiles (
          display_name,
          avatar_url,
          show_profile
        )
      `)
      .eq('date', date)
      .order('total_points', { ascending: false }) as PostgrestResponse<DailyTotal>;

    if (error) throw error;
    if (!data) return [];

    // Filter out users who don't want to show their profile
    // and format the response
    const leaderboard = data
      .filter(entry => entry.user_profiles?.show_profile)
      .map((entry, index) => ({
        user_id: entry.user_id,
        display_name: entry.user_profiles?.display_name || 'Anonymous User',
        avatar_url: entry.user_profiles?.avatar_url || null,
        total_points: entry.total_points,
        metrics_completed: entry.metrics_completed,
        rank: index + 1,
      }));

    return leaderboard;
  },

  async getUserRank(userId: string, date: string): Promise<number | null> {
    const { data, error } = await supabase
      .from('daily_totals')
      .select('user_id, total_points')
      .eq('date', date)
      .order('total_points', { ascending: false });

    if (error) throw error;
    if (!data) return null;

    const userIndex = data.findIndex(entry => entry.user_id === userId);
    return userIndex === -1 ? null : userIndex + 1;
  },

  async updateUserProfile(userId: string, profile: {
    display_name?: string;
    avatar_url?: string;
    show_profile?: boolean;
  }) {
    const { error } = await supabase
      .from('user_profiles')
      .upsert({
        id: userId,
        ...profile,
        updated_at: new Date().toISOString(),
      });

    if (error) throw error;
  },

  async getUserProfile(userId: string): Promise<UserProfile | null> {
    const { data, error } = await supabase
      .from('user_profiles')
      .select('display_name, avatar_url, show_profile')
      .eq('id', userId)
      .single();

    if (error && error.code !== 'PGRST116') throw error; // PGRST116 is "not found"
    return data;
  },
};

================
File: src/services/metricsService.ts
================
import { supabase } from './supabaseClient';

export type MetricType = 'steps' | 'distance' | 'calories';

interface MetricScore {
  user_id: string;
  date: string;
  metric_type: MetricType;
  goal_reached: boolean;
  points: number;
}

interface MetricUpdate {
  value: number;
  goal: number;
  type: MetricType;
}

export const metricsService = {
  async getDailyMetrics(userId: string, date: string) {
    const { data, error } = await supabase
      .from('daily_metric_scores')
      .select('*')
      .eq('user_id', userId)
      .eq('date', date);

    if (error) throw error;
    return data;
  },

  async updateMetric(userId: string, update: MetricUpdate) {
    const today = new Date().toISOString().split('T')[0];
    const goalReached = update.value >= update.goal;
    
    // Calculate points based on progress
    const progressPercentage = Math.min((update.value / update.goal) * 100, 100);
    const points = Math.floor(progressPercentage);

    const metricScore: MetricScore = {
      user_id: userId,
      date: today,
      metric_type: update.type,
      goal_reached: goalReached,
      points,
    };

    const { error } = await supabase
      .from('daily_metric_scores')
      .upsert(metricScore, {
        onConflict: 'user_id,date,metric_type'
      });

    if (error) throw error;

    // Update daily totals
    await this.updateDailyTotal(userId, today);
  },

  async updateDailyTotal(userId: string, date: string) {
    // Get all metrics for the day
    const { data: metrics, error: metricsError } = await supabase
      .from('daily_metric_scores')
      .select('points, goal_reached')
      .eq('user_id', userId)
      .eq('date', date);

    if (metricsError) throw metricsError;

    // Calculate totals
    const totalPoints = metrics?.reduce((sum, metric) => sum + metric.points, 0) ?? 0;
    const metricsCompleted = metrics?.filter(metric => metric.goal_reached).length ?? 0;

    // Update daily_totals
    const { error: updateError } = await supabase
      .from('daily_totals')
      .upsert({
        user_id: userId,
        date,
        total_points: totalPoints,
        metrics_completed: metricsCompleted,
      }, {
        onConflict: 'user_id,date'
      });

    if (updateError) throw updateError;
  },

  getMetricGoals(): Record<MetricType, number> {
    return {
      steps: 10000,
      distance: 5, // km
      calories: 2000,
    };
  },
};

================
File: src/services/supabaseClient.ts
================
import AsyncStorage from '@react-native-async-storage/async-storage';
import { createClient } from '@supabase/supabase-js';
import Constants from 'expo-constants';
import 'react-native-url-polyfill/auto';

const supabaseUrl = Constants.expoConfig?.extra?.supabaseUrl;
const supabaseAnonKey = Constants.expoConfig?.extra?.supabaseAnonKey;

if (!supabaseUrl || !supabaseAnonKey) {
  throw new Error('Missing Supabase configuration. Please check your environment variables.');
}

export const supabase = createClient(supabaseUrl, supabaseAnonKey, {
  auth: {
    storage: AsyncStorage,
    autoRefreshToken: true,
    persistSession: true,
    detectSessionInUrl: false,
  },
});

================
File: src/types/nativewind.d.ts
================
/// <reference types="nativewind/types" />
import type { ViewProps as RNViewProps } from 'react-native';
import type { TextProps as RNTextProps } from 'react-native';
import type { TextInputProps as RNTextInputProps } from 'react-native';
import type { PressableProps as RNPressableProps } from 'react-native';
import type { ImageProps as RNImageProps } from 'react-native';
import type { ScrollViewProps as RNScrollViewProps } from 'react-native';
import type { KeyboardAvoidingViewProps as RNKeyboardAvoidingViewProps } from 'react-native';
import type { SafeAreaViewProps as RNSafeAreaViewProps } from 'react-native';

declare module 'react-native' {
  export interface ViewProps extends RNViewProps {
    className?: string;
  }
  export interface TextProps extends RNTextProps {
    className?: string;
  }
  export interface TextInputProps extends RNTextInputProps {
    className?: string;
  }
  export interface PressableProps extends RNPressableProps {
    className?: string;
  }
  export interface ImageProps extends RNImageProps {
    className?: string;
  }
  export interface ScrollViewProps extends RNScrollViewProps {
    className?: string;
  }
  export interface KeyboardAvoidingViewProps extends RNKeyboardAvoidingViewProps {
    className?: string;
  }
  export interface SafeAreaViewProps extends RNSafeAreaViewProps {
    className?: string;
  }
}

================
File: .gitignore
================
# Learn more https://docs.github.com/en/get-started/getting-started-with-git/ignoring-files

# dependencies
node_modules/

# Expo
.expo/
dist/
web-build/
expo-env.d.ts

# Native
*.orig.*
*.jks
*.p8
*.p12
*.key
*.mobileprovision

# Metro
.metro-health-check*

# debug
npm-debug.*
yarn-debug.*
yarn-error.*

# macOS
.DS_Store
*.pem

# local env files
.env*.local

# typescript
*.tsbuildinfo

app-example

================
File: app.config.js
================
{
  "expo": {
    "name": "mylera",
    "slug": "mylera",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "mylera",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "splash": {
      "image": "./assets/images/splash-icon.png",
      "resizeMode": "contain",
      "backgroundColor": "#ffffff"
    },
    "assetBundlePatterns": [
      "**/*"
    ],
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router"
    ],
    "experiments": {
      "typedRoutes": true,
      "tsconfigPaths": true
    }
  }
}

================
File: app.json
================
{
  "expo": {
    "name": "mylera",
    "slug": "mylera",
    "version": "1.0.0",
    "orientation": "portrait",
    "icon": "./assets/images/icon.png",
    "scheme": "myapp",
    "userInterfaceStyle": "automatic",
    "newArchEnabled": true,
    "ios": {
      "supportsTablet": true
    },
    "android": {
      "adaptiveIcon": {
        "foregroundImage": "./assets/images/adaptive-icon.png",
        "backgroundColor": "#ffffff"
      }
    },
    "web": {
      "bundler": "metro",
      "output": "static",
      "favicon": "./assets/images/favicon.png"
    },
    "plugins": [
      "expo-router",
      [
        "expo-splash-screen",
        {
          "image": "./assets/images/splash-icon.png",
          "imageWidth": 200,
          "resizeMode": "contain",
          "backgroundColor": "#ffffff"
        }
      ]
    ],
    "experiments": {
      "typedRoutes": true
    }
  }
}

================
File: babel.config.js
================
module.exports = function (api) {
  api.cache(true);
  return {
    presets: [
      ['babel-preset-expo', {
        jsxImportSource: 'nativewind',
      }],
    ],
    plugins: [
      'react-native-reanimated/plugin',
    ],
  };
};

================
File: index.js
================
import 'expo-router/entry';
import 'react-native-url-polyfill/auto';
import { withExpoSnack } from 'nativewind';

// Register for NativeWind
withExpoSnack(require('./app/_layout').default);

================
File: nativewind-config.js
================
module.exports = {
  content: {
    files: [
      "./app/**/*.{js,jsx,ts,tsx}",
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
  },
  theme: {
    extend: {
      colors: {
        primary: "#20B2AA",
        secondary: "#9B59B6",
        background: "#f9f9f9",
        text: {
          primary: "#2C3E50",
          secondary: "#7F8C8D",
          light: "#FFFFFF"
        },
        status: {
          success: "#2ECC71",
          warning: "#F1C40F",
          error: "#E74C3C"
        }
      },
    },
  },
};

================
File: package.json
================
{
  "name": "mylera",
  "main": "expo-router/entry",
  "version": "1.0.0",
  "scripts": {
    "start": "expo start",
    "reset-project": "node ./scripts/reset-project.js",
    "android": "expo start --android",
    "ios": "expo start --ios",
    "web": "expo start --web",
    "test": "jest --watchAll",
    "lint": "expo lint"
  },
  "jest": {
    "preset": "jest-expo"
  },
  "dependencies": {
    "@expo/vector-icons": "^14.0.2",
    "@react-navigation/bottom-tabs": "^7.2.0",
    "@react-navigation/native": "^7.0.14",
    "expo": "~52.0.27",
    "expo-blur": "~14.0.2",
    "expo-constants": "~17.0.4",
    "expo-font": "~13.0.3",
    "expo-haptics": "~14.0.1",
    "expo-linking": "~7.0.4",
    "expo-router": "~4.0.17",
    "expo-splash-screen": "~0.29.21",
    "expo-status-bar": "~2.0.1",
    "expo-symbols": "~0.2.1",
    "expo-system-ui": "~4.0.7",
    "expo-web-browser": "~14.0.2",
    "react": "18.3.1",
    "react-dom": "18.3.1",
    "react-native": "0.76.6",
    "react-native-gesture-handler": "~2.20.2",
    "react-native-reanimated": "~3.16.1",
    "react-native-safe-area-context": "4.12.0",
    "react-native-screens": "~4.4.0",
    "react-native-web": "~0.19.13",
    "react-native-webview": "13.12.5"
  },
  "devDependencies": {
    "@babel/core": "^7.25.2",
    "@types/jest": "^29.5.12",
    "@types/react": "~18.3.12",
    "@types/react-test-renderer": "^18.3.0",
    "jest": "^29.2.1",
    "jest-expo": "~52.0.3",
    "react-test-renderer": "18.3.1",
    "typescript": "^5.3.3"
  },
  "private": true
}

================
File: tailwind.config.js
================
/** @type {import('tailwindcss').Config} */
module.exports = {
  content: {
    files: [
      "./app/**/*.{js,jsx,ts,tsx}",
      "./src/**/*.{js,jsx,ts,tsx}",
    ],
  },
  presets: [require("./nativewind-config.js")],
  theme: {
    extend: {},
  },
  plugins: [],
};

================
File: tsconfig.json
================
{
  "extends": "expo/tsconfig.base",
  "compilerOptions": {
    "strict": true,
    "paths": {
      "@/*": [
        "./*"
      ]
    }
  },
  "include": [
    "**/*.ts",
    "**/*.tsx",
    ".expo/types/**/*.ts",
    "expo-env.d.ts"
  ]
}
